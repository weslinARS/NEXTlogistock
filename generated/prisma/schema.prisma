generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid()) @db.Char(36)
  firstName           String                @map("first_name") @db.VarChar(255)
  lastName            String                @map("last_name") @db.VarChar(255)
  email               String                @unique @db.VarChar(255)
  password            String                @db.VarChar(255)
  role                UserRole              @default(seller)
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime              @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted           Boolean               @default(false) @map("is_deleted")
  ProductPriceHistory ProductPriceHistory[]
  PurchaseOrder       PurchaseOrder[]
  StockMovement       StockMovement[]

  @@map("users")
}

model WareHouse {
  id                String           @id @default(uuid()) @db.Char(36)
  name              String           @unique @db.VarChar(255)
  location          String           @db.VarChar(255)
  createdAt         DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime         @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted         Boolean          @default(false) @map("is_deleted")
  InventoryLevel    InventoryLevel[]
  fromStockMovement StockMovement[]  @relation("FromStockMovement")
  toStockMovement   StockMovement[]  @relation("ToStockMovement")

  @@map("warehouses")
}

model Supplier {
  id            String          @id @default(uuid()) @db.Char(36)
  name          String          @unique @db.VarChar(100)
  email         String          @unique @db.VarChar(255)
  phone         String          @db.VarChar(50)
  address       String          @db.VarChar(255)
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime        @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted     Boolean         @default(false) @map("is_deleted")
  Product       Product[]
  PurchaseOrder PurchaseOrder[]

  @@map("suppliers")
}

model ProductCategory {
  id        String    @id @default(uuid()) @db.Char(36)
  name      String    @unique @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted Boolean   @default(false) @map("is_deleted")
  Product   Product[]

  @@map("product_categories")
}

model Product {
  id                  String                @id @default(uuid()) @db.Char(36)
  categoryId          String                @map("category_id") @db.Char(36)
  supplierId          String                @map("supplier_id") @db.Char(36)
  productBrandId      String                @map("product_brand_id") @db.Char(36)
  name                String                @unique @db.VarChar(200)
  sku                 String                @unique @db.VarChar(100)
  description         String?               @db.Text
  entryPrice          Float                 @map("entry_price") @db.Float
  unitPrice           Float                 @map("unit_price") @db.Float
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime              @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted           Boolean               @default(false) @map("is_deleted")
  InventoryLevel      InventoryLevel[]
  ProductPriceHistory ProductPriceHistory[]
  category            ProductCategory       @relation(fields: [categoryId], references: [id])
  productBrand        ProductBrand          @relation(fields: [productBrandId], references: [id])
  supplier            Supplier              @relation(fields: [supplierId], references: [id])
  PurchaseOrderItem   PurchaseOrderItem[]
  StockMovement       StockMovement[]

  @@index([categoryId], map: "products_category_id_fkey")
  @@index([productBrandId], map: "products_product_brand_id_fkey")
  @@index([supplierId], map: "products_supplier_id_fkey")
  @@map("products")
}

model ProductBrand {
  id        String    @id @default(uuid()) @db.Char(36)
  name      String    @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  Product   Product[]

  @@map("product_brands")
}

model InventoryLevel {
  id          String    @id @default(uuid()) @db.Char(36)
  productId   String    @map("product_id") @db.Char(36)
  warehouseId String    @map("warehouse_id") @db.Char(36)
  quantity    Int
  minStock    Int       @map("min_stock")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  product     Product   @relation(fields: [productId], references: [id])
  warehouse   WareHouse @relation(fields: [warehouseId], references: [id])

  @@index([productId], map: "inventory_levels_product_id_fkey")
  @@index([warehouseId], map: "inventory_levels_warehouse_id_fkey")
  @@map("inventory_levels")
}

model PurchaseOrder {
  id                String              @id @default(uuid()) @db.Char(36)
  supplierId        String              @map("supplier_id") @db.Char(36)
  userId            String              @map("user_id") @db.Char(36)
  orderDate         DateTime            @map("order_date") @db.Timestamp(6)
  status            PurchaseOrderStatus @default(pending)
  totalAmount       Float               @map("total_amount") @db.Float
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime            @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted         Boolean             @default(false) @map("is_deleted")
  PurchaseOrderItem PurchaseOrderItem[]
  supplier          Supplier            @relation(fields: [supplierId], references: [id])
  user              User                @relation(fields: [userId], references: [id])

  @@index([supplierId], map: "purchase_orders_supplier_id_fkey")
  @@index([userId], map: "purchase_orders_user_id_fkey")
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String        @id @default(uuid()) @db.Char(36)
  purchaseOrderId String        @map("purchase_order_id") @db.Char(36)
  productId       String        @map("product_id") @db.Char(36)
  quantity        Int
  unitPrice       Float         @map("unit_price") @db.Float
  subtotal        Float         @db.Float
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime      @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted       Boolean       @default(false) @map("is_deleted")
  product         Product       @relation(fields: [productId], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  @@index([productId], map: "purchase_order_items_product_id_fkey")
  @@index([purchaseOrderId], map: "purchase_order_items_purchase_order_id_fkey")
  @@map("purchase_order_items")
}

model StockMovement {
  id              String     @id @default(uuid()) @db.Char(36)
  fromWarehouseId String?    @map("from_warehouse_id") @db.Char(36)
  toWarehouseId   String?    @map("to_warehouse_id") @db.Char(36)
  userId          String     @map("user_id") @db.Char(36)
  productId       String     @map("product_id") @db.Char(36)
  quantity        Int
  reason          String     @db.Text
  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime   @updatedAt @map("updated_at") @db.Timestamp(6)
  fromWarehouse   WareHouse? @relation("FromStockMovement", fields: [fromWarehouseId], references: [id])
  product         Product    @relation(fields: [productId], references: [id])
  toWarehouse     WareHouse? @relation("ToStockMovement", fields: [toWarehouseId], references: [id])
  user            User       @relation(fields: [userId], references: [id])

  @@index([fromWarehouseId], map: "stock_movements_from_warehouse_id_fkey")
  @@index([productId], map: "stock_movements_product_id_fkey")
  @@index([toWarehouseId], map: "stock_movements_to_warehouse_id_fkey")
  @@index([userId], map: "stock_movements_user_id_fkey")
  @@map("stock_movements")
}

model ProductPriceHistory {
  id            String   @id @default(uuid()) @db.Char(36)
  productId     String   @map("product_id") @db.Char(36)
  userId        String   @map("user_id") @db.Char(36)
  previousPrice Float    @map("previous_price") @db.Float
  newPrice      Float    @map("new_price") @db.Float
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  product       Product  @relation(fields: [productId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@index([productId], map: "product_price_history_product_id_fkey")
  @@index([userId], map: "product_price_history_user_id_fkey")
  @@map("product_price_history")
}

enum PurchaseOrderStatus {
  pending
  approved
  cancelled
  completed
}

enum UserRole {
  admin
  manager
  seller
}
